#+author: conao
#+date: <2018-10-25 Thu>

[[https://github.com/conao3/cort-test.el][https://raw.githubusercontent.com/conao3/files/master/blob/headers/png/cort-test.el.png]]
[[https://github.com/conao3/cort-test.el/blob/master/LICENSE][https://img.shields.io/github/license/conao3/cort-test.el.svg?style=flat-square]]
[[https://github.com/conao3/cort-test.el/releases][https://img.shields.io/github/tag/conao3/cort-test.el.svg?style=flat-square]]
[[https://travis-ci.org/conao3/cort-test.el][https://img.shields.io/travis/conao3/cort-test.el/master.svg?style=flat-square]]
[[https://app.codacy.com/project/conao3/cort-test.el/dashboard][https://img.shields.io/codacy/grade/f37ea5ce921f4d05b4f900945c2121c2.svg?logo=codacy&style=flat-square]]
[[https://www.patreon.com/conao3][https://img.shields.io/badge/patreon-become%20a%20patron-orange.svg?logo=patreon&style=flat-square]]
[[https://twitter.com/conao_3][https://img.shields.io/badge/twitter-@conao__3-blue.svg?logo=twitter&style=flat-square]]
[[https://conao3-support.slack.com/join/shared_invite/enQtNjUzMDMxODcyMjE1LWUwMjhiNTU3Yjk3ODIwNzAxMTgwOTkxNmJiN2M4OTZkMWY0NjI4ZTg4MTVlNzcwNDY2ZjVjYmRiZmJjZDU4MDE][https://img.shields.io/badge/chat-on_slack-blue.svg?logo=slack&style=flat-square]]

[[./imgs/capture.png]]

* Table of Contents
- [[#description][Background]]
- [[#install][Install]]
  - [[#makefile][Makefile]]
  - [[#-travis-yml][.travis.yml]]
  - [[#cort-test-el][cort-test.el]]
- [[#usage][Usage]]
  - [[#basic-test-case][Basic test case]]
  - [[#cort-error-keyword][:cort-error keyword]]
- [[#create-test-case-by-macro][Create test case by macro]]
- [[#migration][Migration]]
  - [[#srt-v2-0-to-cort-v3-0][srt v2.0 to cort v3.0]]
  - [[#srt-v1-0-to-v2-0][srt v1.0 to v2.0]]
- Information
  - [[#why-we-support-emacs-22][Why We support Emacs-22?]]
  - [[#donation][Donation]]
  - [[#commynity][Community]]
  - [[#contribution][Contribution]]
  - [[#license][License]]
  - [[#author][Author]]
  - [[#contributors][Contributors]]
  - [[#special-thanks][Special Thanks]]

* Description
~cort-test.el~ is one-file simply Emacs Lisp unit test package,
there're so many merits.
- It works with Emacs-22 or above.
- Not need to download big package, many files before testing. Only 1 file.
- You can test your package as close to vanilla's Emacs.
- If it fails or error tests, it would output the simple and intuitive error message.

(~ert.el~ is attached as standard to Emacs,
operates from Emacs-24 and I think that
it is difficult to understand the displayed error.)

* Install
1. Put ~cort.el~ your package root folder.
2. Create ~Makefile~, ~.travis.yml~ if you need.
3. Create test cases definition file as ~[package-name]-tests.el~.

(Please look at the file of this repository for a practical example.)

** Makefile
~Makefile~ sample is shown below.

#+begin_src makefile-bsdmake
  TOP       := $(dir $(lastword $(MAKEFILE_LIST)))

  EMACS     ?= emacs

  LOAD_PATH := -L $(TOP)
  BATCH     := $(EMACS) -Q --batch $(LOAD_PATH)

  ELS       := cort.el         # compiling .el list
  ELCS      := $(ELS:.el=.elc)

  all: build

  build: $(ELCS)

  %.elc: %.el
      @printf "Compiling $<\n"
      @$(BATCH) -f batch-byte-compile $<

  check: build
  # If byte compile for specific emacs,
  # set EMACS such as `EMACS=26.1 make check`.
      $(BATCH) -l cort-tests.el -f cort-tests-run

  clean:
      -find . -type f -name "*.elc" | xargs rm
#+end_src

** .travis.yml
~.travis.yml~ sumple is shown below.
#+begin_src fundamental
  language: generic
  sudo: false

  env:
    global:
      - CURL="curl -fsSkL --retry 9 --retry-delay 9"
    matrix:
    - EMACS_VERSION=23.4
    - EMACS_VERSION=24.5
    - EMACS_VERSION=25.3
    - EMACS_VERSION=26.1
    - EMACS_VERSION=master
  install:
    - $CURL -O https://github.com/npostavs/emacs-travis/releases/download/bins/emacs-bin-${EMACS_VERSION}.tar.gz
    - tar xf emacs-bin-${EMACS_VERSION}.tar.gz -C /
    - export EMACS=/tmp/emacs/bin/emacs

  script:
    - make
    - make check
#+end_src

** cort-test.el
~cort-test.el~ sumple is shown below.

#+begin_src emacs-lisp
  ;; require depends package
  (require 'cort)

  ;; if you need temporary functions for a test, define this.
  (defun quote-a ()
    'a)

  ;; define test cases.
  (cort-deftest quote-a
    '((:eq 'a 'a)
      (:eq (quote-a) 'a)
      (:eq 'a (quote-a))
      (:eq (quote-a) (quote-a))))
  
  (cort-deftest arith
    '((:= 9   (+ 4 5))
      (:= -1  (- 4 5))
      (:= 20  (* 4 5))
      (:= 0   (/ 4 5))
      (:= 0.8 (/ 4.0 5))
      (:= 4   (mod 4 5))))
  
  (cort-deftest string-concat
    '((:string= "aaabbb" (concat "aaa" "bbb"))
      (:string= "aaa,bbb,ccc"
                (mapconcat #'identity '("aaa" "bbb" "ccc") ","))))
  
  (cort-deftest string-split
    '((:equal '("aaa" "bbb" "ccc") (split-string "aaa,bbb,ccc" ","))))
  
  (cort-deftest string-length
    '((:= 5  (length "asdfg"))
      (:= 5  (length "あいうえお"))
      (:= 10 (string-width "あいうえお"))))
  
  (cort-deftest string-pickup
    '((:string= "ab"    (substring "abcdef" 0 2))
      (:string= "abcd"  (substring "abcdef" 0 -2))
      (:string= "abcde" (substring "abcdef" 0 -1))
      (:string= "cdef"  (substring "abcdef" 2))))
  
  (cort-deftest string-serch
    '((:= 1 (string-match "bc" "abcd"))))
#+end_src

~cort-deftest~ will receive ~test-name~ and ~test-configuration-list~,
and ~add-to-list~ to ~cort-test-cases~ defined at inside of ~cort-test.el~.

Therefore, define same test case by ~cort-deftest~, not running test twice.
Dupulicated ~test-name~ is allowed.

* Usage
** Basic test case
~test-configuration~ accept list of the form ~(:KEY GIVEN EXPECT)~,
expect to return ~t~ when eval ~(KEY GIVEN EXPECT)~.

By defining like this, any comparison function can use that returns a boolean value
such as ~eq~, ~equal~, or ~=~.

This flexible test notation is one of the important merits of ~cort-test.el~.

** :cort-error keyword
If you pass a list of the form ~(:cort-error 'ERROR-TYPE FORM)~ to ~cort-deftest~,
~'ERROR-TYPE~ accepts symbol such as [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Standard-Errors.html#Standard-Errors][error symbol]] and
expects ~'ERROR-TYPE~ error to occur when evaluating ~(FORM)~.

** Create test case by macro
When writing many test cases, it is troublesome to write common parts many times.

Therefore, you can let the macro make the test case as shown below.

#+begin_src emacs-lisp
  (cort-deftest leaf-test/:if-1
    (:equal
     (macroexpand-1 '(leaf foo :if t))
     '(if t
          (progn
            (require (quote foo) nil nil)))))

  (cort-deftest leaf-test/:if-2
    (:equal
     (macroexpand-1 '(leaf foo :if (and t t)))
     '(if (and t t)
          (progn
            (require (quote foo) nil nil)))))

  (cort-deftest leaf-test/:if-3
    (:equal
     (macroexpand-1 '(leaf foo :if nil))
     '(if nil
          (progn
            (require (quote foo) nil nil)))))

  ;; ...

  ;; Almost test case is (cort-deftest NAME (:equal (macroexpand 'FORM) 'EXPECT))
  ;; -> Create macro to (FORM 'EXPECT) convert to (:equal (macroexpand 'FORM) 'EXPECT)

  ;; test target macro
  (defmacro package-require (package)
    `(require ,package))

  ;; Macro to expand FORM and compare it with EXPECT for equal test case
  (defmacro match-expansion (form expect)
    `(:equal (macroexpand ',form) ,expect))

  (cort-deftest match-expansion0
    (match-expansion
     (package-require 'use-package)
     '(require 'use-package)))

  (cort-deftest match-expansion1
    (:equal (macroexpand '(package-require 'use-package))
            '(require 'use-package)))
#+end_src

~match-expansion0~ and ~match-expansion1~ are equivalent since macros are expanded.

(You can also use a function that returns a list to be accepted by ~cort-deftest~ see cort-test.el.

However, test definitions and test runs should usually be separated, 
and you should not run all forms to immediate when you define a test.

Therefore, we usually recommend using macros.)

* Migration
** v5.0 to v6.0
- Add ~cort-test~ prefix to all functions macros and change below function names.
  - ~cort-run-tests~ changed to ~cort-test-run~
  - ~cort-prune-tests~ changed to ~cort-test-prune~

- Remove environment keyword such as ~:cort-if~, ~:cort-emacs<~,,,

  Use normal condition functions in test definition.

** v4.0 to v5.0
- A now expects a list of forms as the second argument.

  With this change, short and easy to understand
  test definition is now possible.

** cort v3.0 to cort-test v4.0
- ~cort~ has renamed to ~cort-test~

  MELPA ignore ~*-test.el~ and ~*-tests.el~ by default.
  With rename ~cort.el~ to ~cort-test.el~, MELPA can ignore this test framework by default.

  However, since this prefix has not changed, this effect is minimal.

** srt v2.0 to cort v3.0
- ~srt~ has renamed to ~cort~

  All ~srt~ suffix flag is renamed to ~cort~ suffix.

** srt v1.0 to v2.0
- :error flag has changed to :srt-error

  ~:error~ flag has changed to ~:srt-error~ so please fix testcase.
  #+begin_src emacs-lisp
    ;; srt v1.0 notation
    (srt-deftest err:1
      (:error 'void-function
              (a 'a)))
  
    ;; srt v2.0 notation
    (srt-deftest err:1
      (:srt-error 'void-function
                  (a 'a)))
  #+end_src

* Information
** Why We support Emacs-22?
Bundling Emacs-22.1 on macOS 10.13 (High Sierra), we support this.

** Donation
I love OSS and I am dreaming of working on it as *full-time* job.

*With your support*, I will be able to spend more time at OSS!

[[https://www.patreon.com/conao3][https://c5.patreon.com/external/logo/become_a_patron_button.png]]

** Community
All feedback and suggestions are welcome!

You can use github issues, but you can also use [[https://conao3-support.slack.com/join/shared_invite/enQtNjUzMDMxODcyMjE1LWUwMjhiNTU3Yjk3ODIwNzAxMTgwOTkxNmJiN2M4OTZkMWY0NjI4ZTg4MTVlNzcwNDY2ZjVjYmRiZmJjZDU4MDE][Slack]]
if you want a more casual conversation.

** Contribution
travis CI test ~cort-test.el~ with oll Emacs version 22 or above.

I think that it is difficult to prepare the environment locally, 
so I think that it is good to throw PR and test travis for the time being!

Feel free to send PR!

** License
#+begin_example
  Affero General Public License Version 3 (AGPLv3)
  Copyright (c) Naoya Yamashita - https://conao3.com
  https://github.com/conao3/cort-test.el/blob/master/LICENSE
#+end_example

** Author
- Naoya Yamashita ([[https://github.com/conao3][conao3]])

** Contributors
- Kazuya Sugiyama ([[https://github.com/Kzflute][Kzflute]])

** Special Thanks
Advice and comments given by [[http://emacs-jp.github.io/][Emacs-JP]]'s forum member has been a great help
in developing ~cort-test.el~.

Thank you very much!!
