#+author: conao
#+date: <2018-11-10 Sat>

[[https://github.com/conao3/cort.el][https://img.shields.io/github/tag/conao3/cort.el.svg?style=flat-square]]
[[https://travis-ci.org/conao3/cort.el][https://img.shields.io/travis/conao3/cort.el/master.svg?style=flat-square]]
[[https://github.com/conao3/cort.el][https://img.shields.io/github/license/conao3/cort.el.svg?style=flat-square]]
[[https://github.com/conao3/github-header][https://files.conao3.com/github-header/gif/cort-test.gif]]

[[./imgs/capture.png]]

* なにこれ?
~cort.el~ は私が[[https://github.com/conao3/leaf.el][leaf.el]]というパッケージを書くために、
Emacs-22でも完全に動作するテスターがほしいという動機で作成しました。

(余談ですが、[[https://github.com/conao3/leaf.el][leaf.el]]は[[https://github.com/jwiegley/use-package][use-package]], ~package.el~ に代わるパッケージ設定、ダウンロードパッケージです。
~use-package~ はEmacs-24からしか動作しませんが、
~leaf.el~ はレガシーEmacsでも ~use-package~ 調のDSLで設定を書きたいという動機で作成されています。)

* メリット
我々は自分の書いたパッケージがちゃんと動くか、コード改変の度にテストし安全なコミットを行いたいと思っています。
そしてその動作はパッチを当てたパッケージが上手にS式を変換できるか、また上手にEmacsのバッファなどが操作できるかでテストでき、
それはそんなに難しくないはずなのです。

しかしすでにいろいろな人によって書かれているテスターは「複雑」で「必要以上に分割」されており、簡単に扱えるもので貼りません。
理想は軽量な1ファイルを自分のレポジトリに放り込み、テストケースを与えれば粛々とその動作を確認してくれればいいのです。

また、Emacs標準添付テスターである、 ~ert.el~ はEmacs-24からの添付であり、
Emacs-22では動作しません。（さらに[[https://travis-ci.org/conao3/leaf.el/builds/451882796][変なバグ]]も踏む（明らかにpassしてるのにfailする））

そもそも ~ert.el~ は[[https://travis-ci.org/conao3/leaf.el/jobs/449134720][詳細なバックトレース]]を出力してくれますが、
つまりどういう入力を与えて、どういう出力を期待しているのに、
変な結果を返してきた！ということを知りたいのに、
その希望は満たしてくれず、デバックのために知りたい情報を得られません。

結果として
- Emacs-22から動作する。
- テストに失敗したら、まともなエラー出力をしてくれる。
- 1ファイルで完結しており、自分のレポジトリに放り込むだけで使える。
ことを目標に新しいテスターを開発しました。

* どうやって使うねん
~cort.el~ の開発動機からわかるようにこのレポジトリの ~cort.el~ を
自分のレポジトリに放り込むだけで使えます。この仕様は変える予定はありません。

なお、v1.0からはmasterに何かをマージするたびにバージョンタグが上がるようになっています。

** Makefile
まずMakefileを用意し、最低限以下の内容を記述します。
#+begin_src makefile-bsdmake
  TOP       := $(dir $(lastword $(MAKEFILE_LIST)))

  EMACS     ?= emacs

  LOAD_PATH := -L $(TOP)
  BATCH     := $(EMACS) -Q --batch $(LOAD_PATH)

  ELS   := cort.el         # compiling .el list
  ELCS  := $(ELS:.el=.elc)

  all: build

  build: $(ELCS)

  %.elc: %.el
	   @printf "Compiling $<\n"
	   -@$(BATCH) -f batch-byte-compile $<

  test: build
  # If byte compile for specific emacs,
  # set EMACS such as `EMACS=26.1 make`.
	   $(BATCH) -l cort-tests.el -f cort-run-tests-batch-and-exit

  clean:
	   -find . -type f -name "*.elc" | xargs rm
#+end_src

もちろんMakefileを用意しなくてもいいですが、テスト書くなら
trabis.cl使って +「build:passed」のバッチ置きたい+ CIを簡単に書きたいので
用意したほうが良いと思います。

** .travis.yml
#+begin_src fundamental
  language: generic
  sudo: false

  env:
    global:
      - CURL="curl -fsSkL --retry 9 --retry-delay 9"
    matrix:
    - EMACS_VERSION=23.4
    - EMACS_VERSION=24.5
    - EMACS_VERSION=25.3
    - EMACS_VERSION=26.1
    - EMACS_VERSION=master
  install:
    - $CURL -O https://github.com/npostavs/emacs-travis/releases/download/bins/emacs-bin-${EMACS_VERSION}.tar.gz
    - tar xf emacs-bin-${EMACS_VERSION}.tar.gz -C /
    - export EMACS=/tmp/emacs/bin/emacs

  script:
    - make
    - make test
#+end_src

対象とするEmacsのバージョンごとに異なるコンテナでテストが走るので、
走らせるテストは一つのEmacsのみを想定したテストコマンドを実行すれば良いことになります。

「ローカルのテストをパスしないとコミットさせない」という運用を取るなら複数バージョンによる
テストコマンドを記述することになります。書き方はこのレポジトリのMakefileを参考にしてください。

** cort-test.el
#+begin_src emacs-lisp
  ;; パッケージに含まれる.elをrequireします
  (require 'cort)

  ;; テスト用の一時関数があれば定義します。
  (defun quote-a ()
    'a)

  (defmacro sym (x)
    `',x)

  ;; がしがしテストケースを書きます。
  (cort-deftest simple:equal
    (:equal '(a b c) '(a b c)))

  (cort-deftest simple:=
    (:= 100 100))

  (cort-deftest quote-a:0
    (:eq 'a 'a))

  (cort-deftest quote-a:1
    (:eq (quote-a) 'a))

  (cort-deftest sym:1
    (:eq (sym a) 'a))

  (cort-deftest sym:4
    (:equal (sym (a b c)) '(a b c)))

  (cort-deftest error-test
    (:= (+ 1 2) 5))

  (cort-deftest err:1
    (:error 'void-function
	    (a 'a)))

  (cort-deftest err:3
    (:error 'arith-error
	    (/ 1 0)))
  ;; ...
#+end_src

~cort-deftest~ はテスト名とテスト設定を受け取り、内部の変数である ~cort-test-cases~ に ~add-to-list~ します。
つまり同じテストを2度定義しても1度しか実行されません。なおテスト名は唯一の値である必要はありません。

*** 基本のテストケース(~t~ を期待するテスト)
~cort-deftest~ のテスト設定は ~(:key form expect)~ の形式のリストを受け入れ、
~(key form expect)~ を評価した際に ~t~ が返却されることを期待します。

このように定義することにより、比較関数は ~eq~ や ~equal~, ~=~ など真偽値を返す任意の関数を使用できます。
この柔軟なテスト表記は ~cort.el~ の重要なメリットの一つです。

*** エラーを期待するテストケース
~cort-deftest~ に ~(:error 'error-type form)~ の形式のリストを渡した場合、
~'error-type~ は[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Standard-Errors.html#Standard-Errors][エラーシンボル]]を受け取り、 ~(form)~ を評価した際に ~'error-type~ のエラーが発生することを期待します。


** え。。Emacs-22とか古すぎ。。？
macOS 10.13 (High Sierra)にバンドルされてるEmacsが22.1だからサポートすることにしました。
普段使いするマシンにEmacs-21があればEmacs-21をサポートすることになります。(？)

** PR
PRを書いていただける方をお待ちしています！
travisではEmacs-23から最新のEmacsまででテストが通ることを確認しています。

ローカルで環境を整えるのは大変だと思いますので、とりあえずPR投げてtravisにテストしてもらうのもアリだと思います！
気軽にPRよろしくおねがいします！

** Special Thanks
~cort.el~ を作るにあたって、[[http://emacs-jp.github.io/][Emacs-JP]]のフォーラムのメンバーには助言をいただき、とても感謝しています。
ぜひあなたも参加してみませんか？？リンク先にはSlackの招待リンクがあります。
